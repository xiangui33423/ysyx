$version Generated by VerilatedVcd $end
$date Wed Oct 11 04:27:57 2023 $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  8 F! ascii1 [7:0] $end
  $var wire  8 G! ascii2 [7:0] $end
  $var wire  1 A! clk $end
  $var wire  8 D! counter1 [7:0] $end
  $var wire  8 E! counter2 [7:0] $end
  $var wire  8 @! data [7:0] $end
  $var wire  1 C! en $end
  $var wire  8 H! key1 [7:0] $end
  $var wire  8 I! key2 [7:0] $end
  $var wire  1 B! rst_n $end
  $scope module produce $end
   $var wire  5 ;! addr1 [4:0] $end
   $var wire  5 <! addr2 [4:0] $end
   $var wire  8 F! ascii1 [7:0] $end
   $var wire  8 G! ascii2 [7:0] $end
   $var wire  8 & buffer [7:0] $end
   $var wire  1 A! clk $end
   $var wire  8 $ counter [7:0] $end
   $var wire  8 D! counter1 [7:0] $end
   $var wire  8 E! counter2 [7:0] $end
   $var wire  8 @! data [7:0] $end
   $var wire  1 C! en $end
   $var wire  8 H! key1 [7:0] $end
   $var wire  8 I! key2 [7:0] $end
   $var wire  3 ' last_state [2:0] $end
   $var wire  1 B! rst_n $end
   $var wire  3 # state [2:0] $end
   $var wire  8 % tmp [7:0] $end
   $scope module u_ascii $end
    $var wire  8 O! addr [7:0] $end
    $var wire  5 >! addr1 [4:0] $end
    $var wire  5 ?! addr2 [4:0] $end
    $var wire  8 + buffer [7:0] $end
    $var wire  1 A! clk $end
    $var wire  8 @! data [7:0] $end
    $var wire 32 t i [31:0] $end
    $var wire  8 =! lut_out [7:0] $end
    $var wire  1 B! rst_n $end
    $var wire  8 H! seg1 [7:0] $end
    $var wire  8 I! seg2 [7:0] $end
    $var wire  8 * tmp [7:0] $end
    $scope module u_rom1 $end
     $var wire  5 >! addr [4:0] $end
     $var wire  1 A! clk $end
     $var wire 32 (! i [31:0] $end
     $var wire  8 u rom(0) [7:0] $end
     $var wire  8 v rom(1) [7:0] $end
     $var wire  8 !! rom(10) [7:0] $end
     $var wire  8 "! rom(11) [7:0] $end
     $var wire  8 #! rom(12) [7:0] $end
     $var wire  8 $! rom(13) [7:0] $end
     $var wire  8 %! rom(14) [7:0] $end
     $var wire  8 &! rom(15) [7:0] $end
     $var wire  8 '! rom(16) [7:0] $end
     $var wire  8 w rom(2) [7:0] $end
     $var wire  8 x rom(3) [7:0] $end
     $var wire  8 y rom(4) [7:0] $end
     $var wire  8 z rom(5) [7:0] $end
     $var wire  8 { rom(6) [7:0] $end
     $var wire  8 | rom(7) [7:0] $end
     $var wire  8 } rom(8) [7:0] $end
     $var wire  8 ~ rom(9) [7:0] $end
     $var wire  1 B! rst_n $end
     $var wire  8 H! seg [7:0] $end
    $upscope $end
    $scope module u_rom2 $end
     $var wire  5 ?! addr [4:0] $end
     $var wire  1 A! clk $end
     $var wire 32 :! i [31:0] $end
     $var wire  8 )! rom(0) [7:0] $end
     $var wire  8 *! rom(1) [7:0] $end
     $var wire  8 3! rom(10) [7:0] $end
     $var wire  8 4! rom(11) [7:0] $end
     $var wire  8 5! rom(12) [7:0] $end
     $var wire  8 6! rom(13) [7:0] $end
     $var wire  8 7! rom(14) [7:0] $end
     $var wire  8 8! rom(15) [7:0] $end
     $var wire  8 9! rom(16) [7:0] $end
     $var wire  8 +! rom(2) [7:0] $end
     $var wire  8 ,! rom(3) [7:0] $end
     $var wire  8 -! rom(4) [7:0] $end
     $var wire  8 .! rom(5) [7:0] $end
     $var wire  8 /! rom(6) [7:0] $end
     $var wire  8 0! rom(7) [7:0] $end
     $var wire  8 1! rom(8) [7:0] $end
     $var wire  8 2! rom(9) [7:0] $end
     $var wire  1 B! rst_n $end
     $var wire  8 I! seg [7:0] $end
    $upscope $end
   $upscope $end
   $scope module u_fsm $end
    $var wire  3 K! IDLE [2:0] $end
    $var wire  3 M! OFF [2:0] $end
    $var wire  3 L! ON [2:0] $end
    $var wire  3 N! WAIT [2:0] $end
    $var wire  1 A! clk $end
    $var wire  3 # current_state [2:0] $end
    $var wire  8 @! data [7:0] $end
    $var wire  1 C! en $end
    $var wire  3 J! next_state [2:0] $end
    $var wire  1 B! rst_n $end
    $var wire  3 # state [2:0] $end
   $upscope $end
   $scope module u_rom_ascii1 $end
    $var wire  5 ;! addr [4:0] $end
    $var wire  1 A! clk $end
    $var wire 32 a i [31:0] $end
    $var wire  8 P rom(0) [7:0] $end
    $var wire  8 Q rom(1) [7:0] $end
    $var wire  8 Z rom(10) [7:0] $end
    $var wire  8 [ rom(11) [7:0] $end
    $var wire  8 \ rom(12) [7:0] $end
    $var wire  8 ] rom(13) [7:0] $end
    $var wire  8 ^ rom(14) [7:0] $end
    $var wire  8 _ rom(15) [7:0] $end
    $var wire  8 ` rom(16) [7:0] $end
    $var wire  8 R rom(2) [7:0] $end
    $var wire  8 S rom(3) [7:0] $end
    $var wire  8 T rom(4) [7:0] $end
    $var wire  8 U rom(5) [7:0] $end
    $var wire  8 V rom(6) [7:0] $end
    $var wire  8 W rom(7) [7:0] $end
    $var wire  8 X rom(8) [7:0] $end
    $var wire  8 Y rom(9) [7:0] $end
    $var wire  1 B! rst_n $end
    $var wire  8 F! seg [7:0] $end
   $upscope $end
   $scope module u_rom_ascii2 $end
    $var wire  5 <! addr [4:0] $end
    $var wire  1 A! clk $end
    $var wire 32 s i [31:0] $end
    $var wire  8 b rom(0) [7:0] $end
    $var wire  8 c rom(1) [7:0] $end
    $var wire  8 l rom(10) [7:0] $end
    $var wire  8 m rom(11) [7:0] $end
    $var wire  8 n rom(12) [7:0] $end
    $var wire  8 o rom(13) [7:0] $end
    $var wire  8 p rom(14) [7:0] $end
    $var wire  8 q rom(15) [7:0] $end
    $var wire  8 r rom(16) [7:0] $end
    $var wire  8 d rom(2) [7:0] $end
    $var wire  8 e rom(3) [7:0] $end
    $var wire  8 f rom(4) [7:0] $end
    $var wire  8 g rom(5) [7:0] $end
    $var wire  8 h rom(6) [7:0] $end
    $var wire  8 i rom(7) [7:0] $end
    $var wire  8 j rom(8) [7:0] $end
    $var wire  8 k rom(9) [7:0] $end
    $var wire  1 B! rst_n $end
    $var wire  8 G! seg [7:0] $end
   $upscope $end
   $scope module u_rom_counter1 $end
    $var wire  5 ( addr [4:0] $end
    $var wire  1 A! clk $end
    $var wire 32 = i [31:0] $end
    $var wire  8 , rom(0) [7:0] $end
    $var wire  8 - rom(1) [7:0] $end
    $var wire  8 6 rom(10) [7:0] $end
    $var wire  8 7 rom(11) [7:0] $end
    $var wire  8 8 rom(12) [7:0] $end
    $var wire  8 9 rom(13) [7:0] $end
    $var wire  8 : rom(14) [7:0] $end
    $var wire  8 ; rom(15) [7:0] $end
    $var wire  8 < rom(16) [7:0] $end
    $var wire  8 . rom(2) [7:0] $end
    $var wire  8 / rom(3) [7:0] $end
    $var wire  8 0 rom(4) [7:0] $end
    $var wire  8 1 rom(5) [7:0] $end
    $var wire  8 2 rom(6) [7:0] $end
    $var wire  8 3 rom(7) [7:0] $end
    $var wire  8 4 rom(8) [7:0] $end
    $var wire  8 5 rom(9) [7:0] $end
    $var wire  1 B! rst_n $end
    $var wire  8 D! seg [7:0] $end
   $upscope $end
   $scope module u_rom_counter2 $end
    $var wire  5 ) addr [4:0] $end
    $var wire  1 A! clk $end
    $var wire 32 O i [31:0] $end
    $var wire  8 > rom(0) [7:0] $end
    $var wire  8 ? rom(1) [7:0] $end
    $var wire  8 H rom(10) [7:0] $end
    $var wire  8 I rom(11) [7:0] $end
    $var wire  8 J rom(12) [7:0] $end
    $var wire  8 K rom(13) [7:0] $end
    $var wire  8 L rom(14) [7:0] $end
    $var wire  8 M rom(15) [7:0] $end
    $var wire  8 N rom(16) [7:0] $end
    $var wire  8 @ rom(2) [7:0] $end
    $var wire  8 A rom(3) [7:0] $end
    $var wire  8 B rom(4) [7:0] $end
    $var wire  8 C rom(5) [7:0] $end
    $var wire  8 D rom(6) [7:0] $end
    $var wire  8 E rom(7) [7:0] $end
    $var wire  8 F rom(8) [7:0] $end
    $var wire  8 G rom(9) [7:0] $end
    $var wire  1 B! rst_n $end
    $var wire  8 E! seg [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b000 #
b00000000 $
b00000000 %
b00000000 &
b000 '
b00000 (
b00000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000000000000000000000000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000 I
b00000000 J
b00000000 K
b00000000 L
b00000000 M
b00000000 N
b00000000000000000000000000000000 O
b00000000 P
b00000000 Q
b00000000 R
b00000000 S
b00000000 T
b00000000 U
b00000000 V
b00000000 W
b00000000 X
b00000000 Y
b00000000 Z
b00000000 [
b00000000 \
b00000000 ]
b00000000 ^
b00000000 _
b00000000 `
b00000000000000000000000000000000 a
b00000000 b
b00000000 c
b00000000 d
b00000000 e
b00000000 f
b00000000 g
b00000000 h
b00000000 i
b00000000 j
b00000000 k
b00000000 l
b00000000 m
b00000000 n
b00000000 o
b00000000 p
b00000000 q
b00000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000100100 t
b00000000 u
b00000000 v
b00000000 w
b00000000 x
b00000000 y
b00000000 z
b00000000 {
b00000000 |
b00000000 }
b00000000 ~
b00000000 !!
b00000000 "!
b00000000 #!
b00000000 $!
b00000000 %!
b00000000 &!
b00000000 '!
b00000000000000000000000000000000 (!
b00000000 )!
b00000000 *!
b00000000 +!
b00000000 ,!
b00000000 -!
b00000000 .!
b00000000 /!
b00000000 0!
b00000000 1!
b00000000 2!
b00000000 3!
b00000000 4!
b00000000 5!
b00000000 6!
b00000000 7!
b00000000 8!
b00000000 9!
b00000000000000000000000000000000 :!
b10000 ;!
b10000 <!
b00000000 =!
b10000 >!
b10000 ?!
b00000000 @!
1A!
0B!
0C!
b00000000 D!
b00000000 E!
b00000000 F!
b00000000 G!
b00000000 H!
b00000000 I!
b000 J!
b000 K!
b001 L!
b010 M!
b100 N!
b00000000 O!
#2
#3
#4
#5
#6
0A!
#7
#8
#9
#10
#11
b11111100 ,
b01100000 -
b11011010 .
b11110010 /
b01100110 0
b10110110 1
b10111110 2
b11100000 3
b11111110 4
b11110110 5
b11101110 6
b11111110 7
b10011100 8
b11111100 9
b10011110 :
b10001110 ;
b11111100 >
b01100000 ?
b11011010 @
b11110010 A
b01100110 B
b10110110 C
b10111110 D
b11100000 E
b11111110 F
b11110110 G
b11101110 H
b11111110 I
b10011100 J
b11111100 K
b10011110 L
b10001110 M
b11111100 P
b01100000 Q
b11011010 R
b11110010 S
b01100110 T
b10110110 U
b10111110 V
b11100000 W
b11111110 X
b11110110 Y
b11101110 Z
b11111110 [
b10011100 \
b11111100 ]
b10011110 ^
b10001110 _
b11111100 b
b01100000 c
b11011010 d
b11110010 e
b01100110 f
b10110110 g
b10111110 h
b11100000 i
b11111110 j
b11110110 k
b11101110 l
b11111110 m
b10011100 n
b11111100 o
b10011110 p
b10001110 q
b11111100 u
b01100000 v
b11011010 w
b11110010 x
b01100110 y
b10110110 z
b10111110 {
b11100000 |
b11111110 }
b11110110 ~
b11101110 !!
b11111110 "!
b10011100 #!
b11111100 $!
b10011110 %!
b10001110 &!
b11111100 )!
b01100000 *!
b11011010 +!
b11110010 ,!
b01100110 -!
b10110110 .!
b10111110 /!
b11100000 0!
b11111110 1!
b11110110 2!
b11101110 3!
b11111110 4!
b10011100 5!
b11111100 6!
b10011110 7!
b10001110 8!
1A!
1C!
b001 J!
#12
1B!
b11111100 D!
b11111100 E!
#13
#14
#15
#16
0A!
#17
#18
#19
#20
#21
b001 #
b00011101 %
b00011101 *
b00000000000000000000000000010000 =
b00000000000000000000000000010000 O
b00000000000000000000000000010000 a
b00000000000000000000000000010000 s
b00000000000000000000000000010000 (!
b00000000000000000000000000010000 :!
b01101 ;!
b00001 <!
b01010111 =!
b00111 >!
b00101 ?!
b00011101 @!
1A!
b11111100 F!
b01100000 G!
b11100000 H!
b10110110 I!
#22
#23
#24
#25
#26
0A!
#27
#28
#29
#30
#31
b00000001 $
b11110000 %
b00011101 &
b001 '
b00001 )
b11110000 *
b00011101 +
b10000 ;!
b10000 <!
b00000000 =!
b10000 >!
b10000 ?!
b11110000 @!
1A!
b01100000 E!
b00000000 F!
b00000000 G!
b00000000 H!
b00000000 I!
b010 J!
#32
#33
#34
#35
#36
0A!
#37
#38
#39
#40
#41
b010 #
b00011101 %
b11110000 &
b00011101 *
b11110000 +
b01010111 =!
b00011101 @!
1A!
b100 J!
#42
#43
#44
#45
#46
0A!
#47
#48
#49
#50
#51
b100 #
b01000101 %
b00011101 &
b010 '
b01000101 *
b00011101 +
b00101 ;!
b00100 <!
b00110000 =!
b00000 >!
b00011 ?!
b01000101 @!
1A!
b10110110 F!
b01100110 G!
b11111100 H!
b11110010 I!
b000 J!
#52
#53
#54
#55
#56
0A!
#57
#58
#59
#60
#61
b000 #
b01000101 &
b100 '
b01000101 +
1A!
b001 J!
#62
#63
#64
#65
#66
0A!
#67
#68
#69
#70
#71
b001 #
b000 '
1A!
#72
#73
#74
#75
#76
0A!
#77
#78
#79
#80
#81
b00000010 $
b001 '
b00010 )
1A!
b11011010 E!
#82
#83
#84
#85
#86
0A!
#87
#88
#89
#90
#91
1A!
#92
#93
#94
#95
#96
0A!
#97
#98
#99
#100
#101
